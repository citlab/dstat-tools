require 'gnuplot'
require 'csv'
require 'optparse'

# dstat_plot
# plots csv data generated by dstat-monitor
#
# TODOS:
#   invertierte graphen mit max wert als optionsfeld default 100
#   Zeit auf x Achse -> epochen (parameter ob sekunden oder minuten) und option auf normierte Zeti (z.b. x-achse fest auf 6minuten)
#   titelgraphik sollte mehr infos erhalten
#   legende erstellen
#   optimierte moeglichkeit viele Dateien anzugeben foldername + *.csv
#   ausgabe in Datei
#

def plot(dataSets, category, field)
  Gnuplot.open do |gp|
    Gnuplot::Plot.new(gp) do |plot|
      plot.title  "#{category}[#{field}] over time"
      plot.xlabel "Index"
      plot.ylabel "#{category}: #{field}"
      
      #x = (0..50).collect { |v| v.to_f }
      #y = x.collect { |v| v ** 2 }

      plot.data = []
      dataSets.each do |dataSet|
        x = (0..dataSet.count-1).collect { |index| index }
        y = dataSet.collect { |item| item }
        gnuplotData = Gnuplot::DataSet.new([x, y]) do |ds|
          # ds.with = "filledcurve x1"
          # ds.with = "linespoint"
          ds.with = "lines"
          ds.notitle
        end
        plot.data.push gnuplotData
      end
    end
  end
end

def read_csv(category, field, files)
  puts "Reading from csv."
  dataSets = [] # dataSet = [[dataSet0],[dataSet1],[dataSet2]]

  files.each do |file|
    CSV.open(file) do |csvFile| # set a mode?
      for i in 0..4 do # skip the first 5 rows, nothing in there that interests us 
    	csvFile.shift
      end

      currentRow = csvFile.shift
      categoryIndex = currentRow.index(category)
    	if categoryIndex == "null"
    		puts "#{category} is not a valid parameter for 'category'. Item could not be found."
        puts "Categories: #{row.inspect}"
    		exit 1
    	end
    	
    	currentRow = csvFile.shift.drop(categoryIndex)
    	fieldIndex =  categoryIndex + currentRow.index(field)
    	if fieldIndex == "null"
    		puts "#{field} is not a valid parameter for 'field'. Item could not be found."
        puts "Fields: #{currentRow.inspect}"
    		exit 1
    	end

      # get all the interesting values and put them in an array
    	currentRow = csvFile.shift
      dataSet = []
      until csvFile.eof do
        dataSet.push currentRow.at(fieldIndex)
        currentRow = csvFile.shift
      end
      dataSets.push dataSet
    end
  end

  dataSets # dataSet = [[dataSet0],[dataSet1],[dataSet2]]
end


def read_options_and_arguments
  options = {} # Hash that hold all the options

  optparse = OptionParser.new do |opts|
    # banner that is displayed at the top
    opts.banner = "Usage: dstat_plot.rb [options] -c CATEGORY -f FIELD file1 file2 file3"

    ### options and what they do
    options[:verbose] = false
    opts.on( '-v', '--verbose', 'Output more information') do
      options[:verbose] = true
    end

    options[:inverted] = false
    opts.on( '-i', '--inverted', 'Invert the graph') do
      options[:inverted] = true
    end    

    options[:category] = nil
    opts.on( '-c', '--category CATEGORY', 'Select the category') do |category|
      options[:category] = category
    end

    options[:field] = nil
    opts.on( '-f', '--field FIELD' , 'Select the field') do |field|
      options[:field] = field
    end

    # This displays the help screen
    opts.on( '-h', '--help', 'Display this screen' ) do
      puts opts
      exit
    end
  end

  # there are two forms of the parse method. 'parse' 
  # simply parses ARGV, while 'parse!' parses ARGV 
  # and removes all options parametersfound. What's
  # left is the list of files
  optparse.parse!

  files = []
  ARGV.each do |file|
    files.push(file)
  end
  options[:files] = files

  options
end

options = read_options_and_arguments
dataSets = read_csv(options[:category], options[:field], options[:files])
if options[:verbose] then puts dataSets.inspect end
plot(dataSets, options[:category], options[:field])
