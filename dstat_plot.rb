require 'Gnuplot'
require 'CSV'
require 'optparse'

# dstat_plot
# plots csv data generated by dstat-monitor
#
#
# invertierte graphen
# Zeit auf x Achse -> epochen
#

def plot(dataSet, category, field)
  Gnuplot.open do |gp|
    Gnuplot::Plot.new(gp) do |plot|
  
      plot.title  "#{category}[#{field}] over time"
      plot.xlabel "Index"
      plot.ylabel "#{category}: #{field}"
      
      #x = (0..50).collect { |v| v.to_f }
      #y = x.collect { |v| v ** 2 }

      x = (0..dataSet.count-1).collect { |index| index }
      y = dataSet.collect { |item| item }

      plot.data << Gnuplot::DataSet.new([x, y]) do |ds|
        # ds.with = "filledcurve x1"
        # ds.with = "linespoint"
        ds.with = "lines" 
        ds.notitle
      end
    end
  end
end

def read_csv(category, field, files)
  puts "Reading from csv."
  dataSet = Array.new

  CSV.open(files.first) { |file| # set a mode?
    for i in 0..4 # skip the first 5 rows, nothing in there that interests us
  		file.shift
  	end

    currentRow = file.shift
    categoryIndex = currentRow.index(category)
  	if categoryIndex == "null"
  		puts "#{category} is not a valid parameter for 'category'. Item could not be found."
      puts "Categories: #{row.inspect}"
  		exit 1
  	end
  	
  	currentRow = file.shift.drop(categoryIndex)
  	fieldIndex =  categoryIndex + currentRow.index(field)
  	if fieldIndex == "null"
  		puts "#{field} is not a valid parameter for 'field'. Item could not be found."
      puts "Fields: #{currentRow.inspect}"
  		exit 1
  	end

  	currentRow = file.shift
    until file.eof do
      dataSet.push currentRow.at(fieldIndex)
      currentRow = file.shift
    end
  }

  dataSet
end


def read_arguments
  options = {} # Hash that hold all the options

  optparse = OptionParser.new do |opts|
    # banner that is displayed at the top
    opts.banner = "Usage: dstat_plot.rb [options] -c CATEGORY -f FIELD file1 file2 file3"

    ### options and what they do
    options[:verbose] = false
    opts.on( '-v', '--verbose', 'Output more information') do
      options[:verbose] = true
    end

    options[:category] = nil
    opts.on( '-c', '--category CATEGORY', 'Select the category') do |category|
      options[:category] = category
    end

    options[:field] = nil
    opts.on( '-f', '--field FIELD' , 'Select the category') do |field|
      options[:field] = field
    end

    # This displays the help screen
    opts.on( '-h', '--help', 'Display this screen' ) do
      puts opts
      exit
    end
  end

  # there are two forms of the parse method. The 'parse' 
  # method simply parses ARGV, while the 'parse!' method
  # parses ARGV and removes any options found there, as
  # well as any parameters for the options. What's left
  # is the list of files
  optparse.parse!

  files = []
  ARGV.each do |file|
    files.push(file)
  end
  options[:files] = files

  options
end

options = read_arguments
dataSet = read_csv(options[:category], options[:field], options[:files])
puts dataSet.inspect
plot(dataSet, options[:category], options[:field])